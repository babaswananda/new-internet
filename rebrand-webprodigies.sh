#!/bin/bash

echo "🎨 Rebranding WebProdigies Codebases with Unified AI"
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_rebrand() {
    echo -e "${PURPLE}[REBRAND]${NC} $1"
}

# Function to replace text in files
replace_in_file() {
    local file="$1"
    local search="$2"
    local replace="$3"
    
    if [ -f "$file" ]; then
        sed -i.bak "s/$search/$replace/g" "$file" 2>/dev/null || sed -i '' "s/$search/$replace/g" "$file" 2>/dev/null
        print_rebrand "Updated $file: $search → $replace"
    fi
}

# Function to replace text in all files in a directory
replace_in_directory() {
    local dir="$1"
    local search="$2"
    local replace="$3"
    local extensions="$4"
    
    if [ -d "$dir" ]; then
        print_status "Rebranding $dir..."
        find "$dir" -type f \( $extensions \) -exec grep -l "$search" {} \; | while read file; do
            replace_in_file "$file" "$search" "$replace"
        done
    fi
}

echo ""
echo "🎥 Rebranding Spotlight (Webinar Platform)"
echo "=========================================="

if [ -d "webprodigies-spotlight-main" ]; then
    cd webprodigies-spotlight-main
    
    # Update package.json
    print_rebrand "Updating package.json..."
    replace_in_file "package.json" "webprodigies-spotlight" "unified-ai-webinar"
    replace_in_file "package.json" "Create Next App" "Unified AI Webinar Platform"
    replace_in_file "package.json" "Generated by create next app" "Token-gated webinar platform powered by Unified AI"
    
    # Update layout.tsx metadata
    print_rebrand "Updating layout metadata..."
    replace_in_file "src/app/layout.tsx" "Create Next App" "Unified AI Webinar Platform"
    replace_in_file "src/app/layout.tsx" "Generated by create next app" "Token-gated webinar platform powered by Unified AI"
    
    # Update README
    if [ -f "README.md" ]; then
        print_rebrand "Updating README.md..."
        cat > README.md << 'EOL'
# Unified AI Webinar Platform

Token-gated webinar and live streaming platform powered by Unified AI.

## Features

- 🎥 Live streaming with Stream.io
- 🪙 Token-gated access with AI Tokens
- 🤖 AI co-hosts and assistants
- 💰 Built-in monetization
- 🔐 Clerk authentication
- 📊 Analytics and insights

## Powered by Unified AI

This platform is part of the Unified AI ecosystem, providing seamless integration with:
- Handle Registry for identity management
- AI Token economy for access control
- Vault system for creator monetization
- Agent deployment for enhanced experiences

## Getting Started

1. Install dependencies: `npm install`
2. Set up environment variables (see .env.example)
3. Run database migrations: `npx prisma migrate dev`
4. Start development server: `npm run dev`

## Environment Variables

```env
# Database
DATABASE_URL="postgresql://username:password@localhost:5432/unified_ai_webinar"

# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="your_clerk_publishable_key"
CLERK_SECRET_KEY="your_clerk_secret_key"

# Stream.io for video
NEXT_PUBLIC_STREAM_API_KEY="your_stream_api_key"
STREAM_SECRET_KEY="your_stream_secret_key"

# Stripe for payments
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="your_stripe_publishable_key"
STRIPE_SECRET_KEY="your_stripe_secret_key"

# VAPI for AI
VAPI_API_KEY="your_vapi_api_key"

# App URL
NEXT_PUBLIC_APP_URL="http://localhost:3003"
```

## License

Powered by Unified AI - The protocol-grade launchpad for the agent economy.
EOL
    fi
    
    # Replace WebProdigies branding in source files
    print_status "Replacing branding in source files..."
    replace_in_directory "src" "WebProdigies" "Unified AI" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    replace_in_directory "src" "webprodigies" "unified-ai" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    replace_in_directory "src" "Spotlight" "Unified AI Webinar" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    
    # Update any hardcoded titles and descriptions
    replace_in_directory "src" "Create Next App" "Unified AI Webinar Platform" "-name '*.tsx' -o -name '*.ts'"
    replace_in_directory "src" "Generated by create next app" "Token-gated webinar platform powered by Unified AI" "-name '*.tsx' -o -name '*.ts'"
    
    cd ..
    print_success "Spotlight rebranding complete!"
else
    print_error "Spotlight codebase not found!"
fi

echo ""
echo "👥 Rebranding Grouple (Social Platform)"
echo "======================================="

if [ -d "webprodigies-grouple-main" ]; then
    cd webprodigies-grouple-main
    
    # Update package.json
    print_rebrand "Updating package.json..."
    replace_in_file "package.json" "webprodigies-grouple" "unified-ai-social"
    replace_in_file "package.json" "grouple" "unified-ai-social"
    
    # Update README
    if [ -f "README.md" ]; then
        print_rebrand "Updating README.md..."
        cat > README.md << 'EOL'
# Unified AI Social Platform (AIMadeMeRich)

Social platform for sharing AI success stories and building communities in the agentic internet.

## Features

- 📱 Social feed for success stories
- 👥 Community groups and discussions
- 🏆 Leaderboards and achievements
- 💰 Earnings showcases
- 🔐 Clerk authentication
- 💳 Stripe payments

## Powered by Unified AI

This platform is part of the Unified AI ecosystem, providing seamless integration with:
- Handle Registry for identity management
- AI Token economy for premium features
- Vault system for creator monetization
- Agent deployment for enhanced experiences

## Getting Started

1. Install dependencies: `npm install`
2. Set up environment variables (see .env.example)
3. Run database migrations: `npx prisma migrate dev`
4. Start development server: `npm run dev`

## Environment Variables

```env
# Database
DATABASE_URL="postgresql://username:password@localhost:5432/unified_ai_social"

# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="your_clerk_publishable_key"
CLERK_SECRET_KEY="your_clerk_secret_key"

# Stripe for payments
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="your_stripe_publishable_key"
STRIPE_SECRET_KEY="your_stripe_secret_key"

# App URL
NEXT_PUBLIC_APP_URL="http://localhost:3004"
```

## License

Powered by Unified AI - The protocol-grade launchpad for the agent economy.
EOL
    fi
    
    # Replace WebProdigies branding in source files
    print_status "Replacing branding in source files..."
    replace_in_directory "src" "WebProdigies" "Unified AI" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    replace_in_directory "src" "webprodigies" "unified-ai" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    replace_in_directory "src" "Grouple" "AIMadeMeRich" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    replace_in_directory "src" "grouple" "aimademerich" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js'"
    
    cd ..
    print_success "Grouple rebranding complete!"
else
    print_error "Grouple codebase not found!"
fi

echo ""
echo "🤖 Rebranding Webinar AI"
echo "========================"

if [ -d "webinar-ai-main" ]; then
    cd webinar-ai-main
    
    # Update package.json if it exists
    if [ -f "package.json" ]; then
        print_rebrand "Updating package.json..."
        replace_in_file "package.json" "webinar-ai" "unified-ai-webinar-enhanced"
    fi
    
    # Update README
    if [ -f "README.md" ]; then
        print_rebrand "Updating README.md..."
        cat > README.md << 'EOL'
# Unified AI Enhanced Webinar Platform

AI-enhanced webinar platform with advanced features powered by Unified AI.

## Features

- 🎥 Advanced live streaming
- 🤖 AI-powered features
- 🪙 Token-gated access
- 📊 Advanced analytics
- 🔐 Authentication
- 💰 Monetization tools

## Powered by Unified AI

This platform is part of the Unified AI ecosystem, providing seamless integration with the protocol-grade infrastructure for the agent economy.

## Getting Started

1. Install dependencies: `npm install`
2. Set up environment variables
3. Start development server: `npm run dev`

## License

Powered by Unified AI - The protocol-grade launchpad for the agent economy.
EOL
    fi
    
    # Replace WebProdigies branding in source files
    print_status "Replacing branding in source files..."
    replace_in_directory "." "WebProdigies" "Unified AI" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js' -o -name '*.py'"
    replace_in_directory "." "webprodigies" "unified-ai" "-name '*.tsx' -o -name '*.ts' -o -name '*.jsx' -o -name '*.js' -o -name '*.py'"
    
    cd ..
    print_success "Webinar AI rebranding complete!"
else
    print_error "Webinar AI codebase not found!"
fi

echo ""
echo "🎨 Creating Unified AI Branding Assets"
echo "====================================="

# Create a shared branding file
cat > unified-ai-branding.md << 'EOL'
# Unified AI Branding Guidelines

## Brand Identity
- **Name**: Unified AI
- **Tagline**: "The protocol-grade launchpad for the agent economy"
- **Domain**: unifiedai (no .ai or ICANN domains)

## Color Palette
- **Primary**: Purple (#8B5CF6) to Pink (#EC4899) gradients
- **Secondary**: Blue (#3B82F6) to Cyan (#06B6D4)
- **Accent**: Orange (#F97316) to Red (#EF4444)
- **Success**: Green (#10B981)
- **Warning**: Yellow (#F59E0B)

## Typography
- **Headers**: normalBOLD style (alternating normal/bold words)
- **Body**: Clean, modern sans-serif
- **Code**: Monospace with syntax highlighting

## Logo Usage
- Use "UNIFIED AI I/O" for main branding
- Include "Powered by Unified AI" in footers
- No WebProdigies branding allowed

## Messaging
- Focus on "agentic internet" and "protocol-grade"
- Emphasize agent deployment and vault ownership
- Highlight token economy and digital sovereignty
EOL

print_success "Created unified-ai-branding.md"

echo ""
echo "📋 Rebranding Summary"
echo "===================="
print_success "✅ All WebProdigies branding removed"
print_success "✅ Unified AI branding applied"
print_success "✅ Package names updated"
print_success "✅ README files rewritten"
print_success "✅ Source code references updated"
print_success "✅ Branding guidelines created"

echo ""
print_warning "Next Steps:"
echo "  1. Review the changes in each codebase"
echo "  2. Update any remaining hardcoded references"
echo "  3. Test the applications to ensure functionality"
echo "  4. Update environment variables with your API keys"
echo "  5. Deploy with Unified AI branding"

echo ""
print_success "Rebranding complete! 🎉"
print_status "All platforms now powered by Unified AI"
